#include <bits/stdc++.h>
#define ll long long
#define cost first
#define id second
#define clr(v, d)		memset(v, d, sizeof(v))
#define read(FILE)  freopen(FILE, "r", stdin);
#define write(FILE) freopen(FILE, "w", stdout);
#define Abdulrahman ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
using namespace std;
const int N = 1e6+6 ,  nBits = 2e8 +5 , M = (1 << 16) , MAX =  1111 , OO = 0x3f3f3f3f , MOD = 1e9+7  , inf =  1 << 30;
const ll INF = (ll)1e18;
ll GCD(ll a, ll b) { return !b ? a : GCD(b , a % b); }
ll LCM(ll x, ll y) { return (x * y / GCD(x, y)); }
ll fact(ll z)      { return (z <= 1) ? 1 : z * fact(z - 1); }
//bool valid (int i , int j){ return i >= 0 && j >= 0 && i < n && j < m ;}
//int X[] = {0 , 0  , 1 , -1 , 1 , -1 ,  1 , -1};
//int Y[] = {1 , -1 , 0 , 0 ,  1 , -1 , -1 ,  1};
//len any int num > 0 ... len = ceil(log10(a+1));
//len any int num > 0 ... len = ceil(log10(a+1));
int a,b,c,d,e,f,g,h,i;
int main(){
    scanf("%d %d %d %d %d %d %d %d %d" , &a,&b,&c,&d,&e,&f,&g,&h,&i);
    ll s = b + c + d + f + g + h ;
    s /= 2;
    a = s - b - c;
    e = s - d - f;
    i = s - g - h;
    printf("%d %d %d\n%d %d %d\n%d %d %d\n" , a,b,c,d,e,f,g,h,i);

  return 0;
}


****************************************************************

#include <bits/stdc++.h>
#define ll long long
#define cost first
#define id second
#define clr(v, d)		memset(v, d, sizeof(v))
#define read(FILE)  freopen(FILE, "r", stdin);
#define write(FILE) freopen(FILE, "w", stdout);
#define Abdulrahman ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
using namespace std;
const int N = 1e6+6 ,  nBits = 2e8 +5 , M = (1 << 16) , MAX =  1111 , OO = 0x3f3f3f3f , MOD = 1e9+7  , inf =  1 << 30;
const ll INF = (ll)1e18;
ll GCD(ll a, ll b) { return !b ? a : GCD(b , a % b); }
ll LCM(ll x, ll y) { return (x * y / GCD(x, y)); }
ll fact(ll z)      { return (z <= 1) ? 1 : z * fact(z - 1); }
//bool valid (int i , int j){ return i >= 0 && j >= 0 && i < n && j < m ;}
//int X[] = {0 , 0  , 1 , -1 , 1 , -1 ,  1 , -1};
//int Y[] = {1 , -1 , 0 , 0 ,  1 , -1 , -1 ,  1};
//len any int num > 0 ... len = ceil(log10(a+1));
//len any int num > 0 ... len = ceil(log10(a+1));
int sum[4], x, grid[4][4];
int main(){
    for(int i = 0 ; i < 3 ; ++i)
    for(int j = 0 ; j < 3 ; ++j){
      scanf("%d", &x);
      sum[i] += x;
      grid[i][j] = x;
    }
  for(int a = 1; a <= 1e5 ; ++a){
    int b = sum[0]-sum[1]+a;
    int c = sum[0]-sum[2]+a;
    if(b && c && b <= 1e5 && c <= 1e5 && b+c == sum[0]){
      grid[0][0] = a;
      grid[1][1] = b;
      grid[2][2] = c;
      for(int i = 0 ; i < 3 ; ++i){
        for(int j = 0 ; j < 3 ; ++j)
          printf("%d ", grid[i][j]);
        puts("");
      }
      return 0;
    }
  }
  return 0;
}
***********************************************
