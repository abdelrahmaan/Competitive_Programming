#include <bits/stdc++.h>
#define ll long long
#define eps 1e-15
using namespace std;
const int o = 15 , N = 1e6+6 , MAX = 100  , OO = 1000000009;
ll gcd(ll a, ll b) { return !b ? a : gcd(b , a % b); }
ll lcm(ll x, ll y) { return (x * y / gcd(x, y)); }
ll fact(ll z)      { return (z <= 1) ? 1 : z * fact(z - 1); }
//int dx[] = {0 , 0  , 1 , -1 , 1 , -1 ,  1 , -1};
//int dy[] = {1 , -1 , 0 , 0 ,  1 , -1 , -1 ,  1};
//len any int num > 0 ... len = ceil(log10(a+1));
int n , m , t , s ;
char grid[101][101];
bool vis[101][101];
int dx[] = {0 , 0  , -1 , 1};
int dy[] = {1 , -1 , 0 , 0};
bool valid(int i , int j ){return i >= 0 && j >= 0 && i < n && j < n ; }
void dfs(int r , int c ){
    if(vis[r][c])    return;
    vis[r][c] = 1;
    for(int k = 0 ; k < 4; ++k){
            int xx = dx[k] + r;
            int yy = dy[k] + c;
            if(valid(xx , yy) && !vis[xx][yy] && grid[xx][yy] != '.' )    dfs(xx ,yy);
        }
    }
int main(){
    scanf("%d" , &t);
    while(t--){
    scanf("%d" ,&n);
    for(int i = 0 ; i < n ; ++i)
        for(int j = 0; j < n ; ++j)
            cin >> grid[i][j];
            memset(vis , 0 , sizeof(vis) );
            int alive = 0;
            for(int i = 0 ; i < n ; ++i)
			   for(int j = 0 ; j < n ; ++j)
				   if(!vis[i][j] && grid[i][j] == 'x' )    dfs(i,j) , ++alive ;
        printf("Case %d: %d\n" ,++s , alive);
   }
        return 0;
}
