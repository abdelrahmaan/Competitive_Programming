#include <bits/stdc++.h>
#define ll long long
#define eps 1e-15
#define PI 3.14159265
using namespace std;
const int N = 1e6+6 , MAX = 10  , OO = 1000000009;
ll gcd(ll a, ll b) { return !b ? a : gcd(b , a % b); }
ll lcm(ll x, ll y) { return (x * y / gcd(x, y)); }
//ll fact(ll z)      { return (z <= 1) ? 1 : z * fact(z - 1); }
//int dx[] = {0 , 0  , 1 , -1 , 1 , -1 ,  1 , -1};
//int dy[] = {1 , -1 , 0 , 0 ,  1 , -1 , -1 ,  1};
int dx[] = {0 , 0  , 1 , -1 } ,  dy[] = {1 , -1 , 0 , 0  };
bool valid(int i , int j) { return i >= 0 && j >= 0 && i < 8 && j < 8; }
//len any int num > 0 ... len = ceil(log10(a+1));
// C(n, r) = n! / ( (n-r)!  * r!)
int n , m , y ,  x , vis[N];
vector<int>toPo;
vector<vector<int>> v;
bool  cycle;
void DFS(int node){
        if(!cycle)   return;
        vis[node] = 1;
        for(int ch : v[node]){
            if(!vis[ch])      DFS(ch);
            else if(vis[ch] == 1) { cycle = 0 ; return;}
        }
    toPo.push_back(node);
    vis[node] = 2;
}
int main(){
   while(scanf("%d %d" , &n , &m) && (n || m)){
       v.clear()  , toPo.clear();
       v.resize(n + 1);
       memset(vis , 0 , sizeof vis);
       cycle = 1;
       for(int i = 0 ; i < m ; ++i){
           scanf("%d %d" , &x , &y);
           v[x].push_back(y);
       }
       for(int i = 1 ; i <= n && cycle ; ++i)  if(!vis[i]) DFS(i);
       if(!cycle)    puts("IMPOSSIBLE");
       else         for (int i = toPo.size() - 1; i >= 0; --i)   printf("%d\n" , toPo[i]);
    }
   return 0;
}
