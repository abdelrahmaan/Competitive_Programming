#include <bits/stdc++.h>
#define ll long long
#define clr(v, d)		memset(v, d, sizeof(v))
#define read(FILE)  freopen(FILE, "r", stdin);
#define write(FILE) freopen(FILE, "w", stdout);
#define Abdulrahman ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
using namespace std;
const int N = 1e6+6 ,  nBits = 2e8 +5 , M = (1 << 16) , MAX =  100 , OO = 0x3f3f3f3f , MOD = 1e9  , inf =  1 << 30;
const ll INF = (ll)1e18;
ll GCD(ll a, ll b) { return !b ? a : GCD(b , a % b); }
ll LCM(ll x, ll y) { return (x * y / GCD(x, y)); }
ll fact(ll z)      { return (z <= 1) ? 1 : z * fact(z - 1); }
//bool valid (int i , int j){ return i >= 0 && j >= 0 && i < n && j < m ;}
//int X[] = {0 , 0  , 1 , -1 , 1 , -1 ,  1 , -1};
//int Y[] = {1 , -1 , 0 , 0 ,  1 , -1 , -1 ,  1};
//len any int num > 0 ... len = ceil(log10(a+1));
//len any int num > 0 ... len = ceil(log10(a+1));
int  n , t , len ,  memo[1000][1000] , mid , ans;
string s;
vector<int>v;
int solve(int i = 0 , int j = len){
    if(i >= j)            return 0;
    int &ret = memo[i][j];
    if(~ret)              return ret;
    if(s[i] == s[j])      ret = solve(i+1 , j-1);
    else                  ret = 1 + min(solve(i+1 , j) , solve(i , j-1));
    return ret;
}
void solve2(int i ,int j){
   if(i == j)                               v.push_back(i) , mid = 1;
   if(i >= j)                               return;
   if(s[i] == s[j])                         v.push_back(i) , solve2(i+1 , j-1);
   else if(solve(i,j) == 1 + solve(i+1,j))  v.push_back(i) , solve2(i+1 , j);
   else if(solve(i,j) == 1 + solve(i,j-1))  v.push_back(j) , solve2(i,j-1);
}
int main(){
    Abdulrahman
    while(cin >> s){
      memset(memo , -1 , sizeof(memo));
      v.clear();
      mid = 0;
      ans = solve(0 , s.size()-1);
      solve2(0 ,s.size()-1);
      cout << ans << ' ';
      for(int i = 0 ; i < v.size() ;++i)                 cout << s[v[i]];
      for(int i = v.size() - 1 - mid ; i >= 0 ;--i)      cout << s[v[i]];
      cout << endl;
   }
    return 0;
}
