#include <bits/stdc++.h>
#define ll long long
#define clr(v, d)		memset(v, d, sizeof(v))
#define read(FILE)  freopen(FILE, "r", stdin);
#define write(FILE) freopen(FILE, "w", stdout);
#define Abdulrahman ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
using namespace std;
const int N = 1e7+7 ,  nBits = 2e8 +5 , M = (1 << 16) , MAX = 10  , OO = 0x3f3f3f3f , mod = 1e9+7 ;
ll gcd(ll a, ll b) { return !b ? a : gcd(b , a % b); }
ll lcm(ll x, ll y) { return (x * y / gcd(x, y)); }
ll fact(ll z)      { return (z <= 1) ? 1 : z * fact(z - 1); }
int dx[] = {0 , 0  , 1 , -1 , 1 , -1 ,  1 , -1};
int dy[] = {1 , -1 , 0 , 0 ,  1 , -1 , -1 ,  1};
bool valid(int i , int j) { return i >= 0 && j >= 0 && i < 8 && j < 8; }
//len any int num > 0 ... len = ceil(log10(a+1));
int n  , num , sum , t  ;
bitset<N> isComp;
void sieve(){
  isComp[0] = isComp[1] = 1;
  for(int i = 4 ; i < N ; i+=2) isComp[i] = 1;
  for(int i = 3 ; i*i <= N ; ++i){
    if(!isComp[i])for(int j = i*i ; j < N ; j+=i){
      isComp[j] = 1;
    }
  }
}

pair<int, int> findpair(int x){
  for(int i = 2 ; i < x ; ++i){
    if(!isComp[i] && !isComp[x-i])  return make_pair(i, x-i);
  }
  return make_pair(-1, -1);
}

int main(){
  sieve();
  while(~scanf("%d", &n)){
    if(n<8) puts("Impossible.");
    else{
      for(int i = n-6 ; ~i ; --i){
        if(!isComp[i]){
          if((n-i)&1){    //take i+3+(an even using goldbach)
            pair<int, int> p = findpair(n-i-3);
            printf("%d %d %d %d\n", i, 3, p.first, p.second);
          }else{          //take i+2+(an even using goldbach)
            pair<int, int> p = findpair(n-i-2);
            printf("%d %d %d %d\n", i, 2, p.first, p.second);
          }
          break;
        }
      }
    }
  }
	return 0;
}

***************************************
#include <bits/stdc++.h>
#define ll long long
#define clr(v, d)		memset(v, d, sizeof(v))
#define read(FILE)  freopen(FILE, "r", stdin);
#define write(FILE) freopen(FILE, "w", stdout);
#define Abdulrahman ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
using namespace std;
const int N = 1e7 ,  nBits = 2e8 +5 , M = (1 << 16) , MAX = 10  , OO = 0x3f3f3f3f , mod = 1e9+7 ;
ll GCD(ll a, ll b) { return !b ? a : GCD(b , a % b); }
ll LCM(ll x, ll y) { return (x * y / GCD(x, y)); }
ll fact(ll z)      { return (z <= 1) ? 1 : z * fact(z - 1); }
int dx[] = {0 , 0  , 1 , -1 , 1 , -1 ,  1 , -1};
int dy[] = {1 , -1 , 0 , 0 ,  1 , -1 , -1 ,  1};
bool valid(int i , int j) { return i >= 0 && j >= 0 && i < 8 && j < 8; }
bool greaterPair(const pair<int,  int> &a , const pair<int,  int> &b ){ return a.first > b.first;}  // sort descending
//len any int num > 0 ... len = ceil(log10(a+1));
bool notPrime[N];
int primes[N];
int primes_cnt, n;
void sieve(){
  notPrime[0] = notPrime[1] = 1;
  for(ll i = 2 ; i*i <= N ; ++i){
    if(!notPrime[i])
        for(int j = i*i ; j < N ; j+=i){
            notPrime[j] = 1;
    }
  }
  for (int i = 2; i < N; i++)
		if (!notPrime[i])   primes[primes_cnt++] = i;
}
int main(){
	sieve();
  while(~scanf("%d", &n)){
    if(n<8) puts("Impossible.");
    else{
      if (n % 2) // if n is odd we turn it into even positive integer
				printf("2 3"), n -= 5;
			else // we subtract 2 primes 2,2 to make it a positive integer so we can apply Goldbach's Conjecture
				printf("2 2"), n -= 4;
			for (int i = 0;;i++) // we try to find 2 primes sum of them is equal to new n from primes number
				if (notPrime[n - primes[i]] == false) {
					printf(" %d %d\n", primes[i], n - primes[i]);
					break;
                    }
				}
            }
	return 0;
}
