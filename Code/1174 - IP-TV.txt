
#include<bits/stdc++.h>
using namespace std ;
typedef long long ll ;
typedef int in ;
typedef unsigned long long ull ;
const double pi = 2*acos(0) ;
#define maxi 40000
#define pf printf
#define sc scanf
#define pb push_back
#define MEM(x,y) (memset((x),(y),sizeof(x)))
#define MIN(x,y) ((x) < (y) ? (x) : (y))
#define MAX(x,y) ((x) > (y) ? (x) : (y))
#define load(array,size)  for(int i=0 ; i<size ; i++) cin>>array[i]  ;
#define new_line  pf("\n")
#define clear_data(array) memset(array,0,sizeof(array))
#define highest_int 2147483647


struct edge
{
    int u ,v ;
    ll w ;
};

map<string, int> mp ;
vector<edge> e ;
edge g ;
int pr[5050] ;

bool comp(edge a, edge b)
{
    return a.w< b.w ;
}

int find_r(int r)
{
    return pr[r]==r ? r : find_r(pr[r]) ;
}

void doUnion(int x, int y)
{
    x>y ? pr[y]=x : pr[x] =y ;
}

void mst(int n)
{
    int u,v,i,cnt =0;
    ll s =0 ;

    sort(e.begin(),e.end(),comp) ;

    for(i=1 ; i<=n ; i++)
        pr[i] =i ;

    for(i=0 ; i<e.size(); i++)
    {
        u = find_r(e[i].u) ;
        v = find_r(e[i].v) ;
        if(u!=v)
        {
            doUnion(u,v) ;
            s+=e[i].w ;
        }
    }
    pf("%lld\n",s) ;
}


int main()
{
    int test,n,m ,cnt=0,u,v;
    sc("%d",&test) ;
    string str1 ,str2 ;
    ll cost ;
    bool flag =false ;
    while(test--)
    {
        sc("%d %d",&m,&n) ;
        cnt =0 ;

        mp.clear() ;
        e.clear() ;

        while(n--)
        {
            cin>>str1>>str2>>cost ;

            if(mp[str1]==0) mp[str1] = ++cnt ;
            u = mp[str1] ;

            if(mp[str2]==0) mp[str2] = ++cnt ;
            v = mp[str2] ;

            g.u = u ;
            g.v = v ;
            g.w =cost ;
            e.pb(g) ;
        }
        if(flag==true)
            pf("\n") ;
            flag = true ;
        mst(m) ;

    }
    return 0;
}
