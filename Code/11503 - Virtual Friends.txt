#include <bits/stdc++.h>
#define ll long long
#define clr(v, d)		memset(v, d, sizeof(v))
#define read(FILE)  freopen(FILE, "r", stdin);
#define write(FILE) freopen(FILE, "w", stdout);
#define Abdulrahman ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
using namespace std;
const int N = 1e6+5 ,  M = (1 << 16) , MAX = 10  , OO = 0x3f3f3f3f , mod = 1e9+7 ;
ll gcd(ll a, ll b) { return !b ? a : gcd(b , a % b); }
ll lcm(ll x, ll y) { return (x * y / gcd(x, y)); }
ll fact(ll z)      { return (z <= 1) ? 1 : z * fact(z - 1); }
int dx[] = {0 , 0  , 1 , -1 , 1 , -1 ,  1 , -1};
int dy[] = {1 , -1 , 0 , 0 ,  1 , -1 , -1 ,  1};
bool valid(int i , int j) { return i >= 0 && j >= 0 && i < 8 && j < 8; }
int t , n ;
map<string, string> Parent;
map<string, int> Rank;
string findParent(string name){  return name == Parent[name] ? name : Parent[name] = findParent(Parent[name]) ;  }
int unionSet(string a, string b){
	a = findParent(a), b = findParent(b);
	if(a != b){
        if(Rank[a] > Rank[b])   swap(a , b);
        Parent[a] = b;
        Rank[b] += Rank[a];
        if(Rank[a] == Rank[b]) ++Rank[b];
	}
       return max(Rank[a] , Rank[b]);
}
int main(){
    scanf("%d", &t);
    while(t--){
        scanf("%d", &n);
        for(int i = 0; i < n; i++){
            string s1 , s2 ;
            cin >> s1 >> s2 ;
            if(Parent.count(s1) == 0)    Parent[s1] = s1 , Rank[s1] = 1;
            if(Parent.count(s2) == 0)    Parent[s2] = s2 , Rank[s2] = 1;
            printf("%d\n" , unionSet(s1 , s2));
        }
        Parent.clear() , Rank.clear();
    }
    return 0;
}
