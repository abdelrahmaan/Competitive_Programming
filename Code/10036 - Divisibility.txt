#include <bits/stdc++.h>
#define ll long long
#define eps 1e-15
#define PI 3.14159265
using namespace std;
const int N = 2e6+1 , MAX = 10  , OO = 1000000009;
ll gcd(ll a, ll b) { return !b ? a : gcd(b , a % b); }
ll lcm(ll x, ll y) { return (x * y / gcd(x, y)); }
ll fact(ll z)      { return (z <= 1) ? 1 : z * fact(z - 1); }
int dx[] = {0 , 0  , 1 , -1 , 1 , -1 ,  1 , -1};
int dy[] = {1 , -1 , 0 , 0 ,  1 , -1 , -1 ,  1};
//bool valid(int i , int j) { return i >= 0 && j >= 0 && i < 8 && j < 8; }
//len any int num > 0 ... len = ceil(log10(a+1));
int t , n , k , x  , dp[10009][100];
vector<int> v;
int fix(int a) {return (a % k + k) % k;}
int solve(int indx , int mod){
    if (indx == n){
        if(mod == 0) return 1 ;
         return 0;
    }
    int &ret = dp[ indx ][ mod ];
	if (ret != -1)     return ret ;
	if (solve(indx + 1, fix(mod + v[indx])) || solve(indx + 1, fix(mod - v[indx]))) return ret = 1;
	return ret = 0;
}
int main(){
    scanf("%d" , &t);
    while(t--){
        scanf("%d %d" , &n , &k);
        v.clear() , memset(dp , -1 , sizeof dp);
        for(int i = 0; i < n ; ++i )   scanf("%d" , &x) , v.push_back(x);
        int ret = solve(1 , fix(v[0])) ;
        printf("%s\n" , ret ? "Divisible" : "Not divisible");
    }
	return 0;
}
****************************************
#include <bits/stdc++.h>
#define ll long long
#define clr(v, d)		memset(v, d, sizeof(v))
#define read(FILE)  freopen(FILE, "r", stdin);
#define write(FILE) freopen(FILE, "w", stdout);
#define Abdulrahman ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
using namespace std;
const int N = 1e7 ,  nBits = 2e8 +5 , M = (1 << 16) , MAX = 1e4+4  , OO = 0x3f3f3f3f , mood = 1e9+7 ;
ll GCD(ll a, ll b) { return !b ? a : GCD(b , a % b); }
ll LCM(ll x, ll y) { return (x * y / GCD(x, y)); }
ll fact(ll z)      { return (z <= 1) ? 1 : z * fact(z - 1); }
bool valid(int i , int j) { return i >= 0 && j >= 0 && i < 4 && j < 4; }
int dx[] = {0 , 0  , 1 , -1 , 1 , -1 ,  1 , -1};
int dy[] = {1 , -1 , 0 , 0 ,  1 , -1 , -1 ,  1};
//int dx[] = {0 , 0  , 1 , -1 };
//int dy[] = {1 , -1 , 0 , 0 };
//len any int num > 0 ... len = ceil(log10(a+1));
int t , n , k , dp[10005][105], arr[10005];
int posNum(int x ){    return ( (x % k) + k ) % k  ;   }
int solve(int i , int mod){
    if(i == n)  return mod % k == 0;
    int &ret = dp[i][mod];
    if(ret != -1)   return ret;
    return ret = ( solve(i + 1 , posNum(mod + arr[i]) ) || solve( i + 1 , posNum (mod - arr[i] ) ) );
}
int main(){
    scanf("%d" , &t);
    while(t--){
        scanf("%d %d" , &n , &k);
        memset(dp , -1  , sizeof dp);
        for(int i = 0  ; i < n ; ++i)   scanf("%d" , &arr[i]);
        solve(0 , 0) ? puts("Divisible") : puts("Not divisible") ;
    }
    return 0;
}

