#include <bits/stdc++.h>
#define ll long long
#define eps 1e-15
#define PI 3.14159265
#define sz(v) (int)v.size()
#define all(v) v.begin(),v.end()
#define clr(v, d)		memset(v, d, sizeof(v))
using namespace std;
const int N = (1 << 10) ,  M = (1 << 16) , MAX = 10  , OO = 0x3f3f3f3f;
ll gcd(ll a, ll b) { return !b ? a : gcd(b , a % b); }
ll lcm(ll x, ll y) { return (x * y / gcd(x, y)); }
ll fact(ll z)      { return (z <= 1) ? 1 : z * fact(z - 1); }
//int dx[] = {0 , 0  , 1 , -1 , 1 , -1 ,  1 , -1};
//int dy[] = {1 , -1 , 0 , 0 ,  1 , -1 , -1 ,  1};
int dx[] = {0 , 0  , 1 , -1};
int dy[] = {1 , -1 , 0 , 0 };
//bool valid(int i , int j) { return i >= 0 && j >= 0 && i < 8 && j < 8; }
//len any int num > 0 ... len = ceil(log10(a+1));
int n, m , cur;
int vis[22][22];
char l , grid[22][22];
bool valid(int x) { return x >= 0 && x < n; }
int fix(int y) {
	if (y < 0) return m - 1;
	if (y >= m) return 0;
	return y;
}
void flood(int x, int y) {
	vis[x][y] = 1;
	cur++;
	for (int k = 0; k < 4; k++) {
		int to_x = dx[k] + x;
		int to_y = fix(dy[k] + y);
		if (valid(to_x) && !vis[to_x][to_y] && grid[to_x][to_y] == l)   flood(to_x, to_y);
	}
}
int main() {
	while (cin >> n >> m) {
		clr(vis , 0);
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				cin >> grid[i][j];
		int x, y;
		cin >> x >> y;
		l = grid[x][y];
		flood(x, y);
		int res = 0;
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				if (!vis[i][j] && grid[i][j] == l) {
					cur = 0;
					flood(i, j);
					res = max(res, cur);
				}
		cout << res << "\n";
	}
	return 0;
}
