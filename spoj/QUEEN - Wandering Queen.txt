#include <bits/stdc++.h>
#define ll long long
#define clr(v, d)		memset(v, d, sizeof(v))
#define read(FILE)  freopen(FILE, "r", stdin);
#define write(FILE) freopen(FILE, "w", stdout);
#define Abdulrahman ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
using namespace std;
const int N = 1e5+9 ,  nBits = 2e8 +5 , M = (1 << 16) , MAX =  1000 , OO = 0x3f3f3f3f , MOD = 1e9  , inf =  1 << 30;
const ll INF = (ll)1e18;
ll GCD(ll a, ll b) { return !b ? a : GCD(b , a % b); }
ll LCM(ll x, ll y) { return (x * y / GCD(x, y)); }
ll fact(ll z)      { return (z <= 1) ? 1 : z * fact(z - 1); }
int X[] = {0 , 0  , 1 , -1 , 1 , -1 ,  1 , -1};
int Y[] = {1 , -1 , 0 , 0 ,  1 , -1 , -1 ,  1};
//int dx[] = {0 , 0  , 1 , -1 };
//int dy[] = {1 , -1 , 0 , 0 };
//len any int num > 0 ... len = ceil(log10(a+1));
//len any int num > 0 ... len = ceil(log10(a+1));
struct point
{
 int x,y;
};
int n,m;
char str[1005][1005];
int dist[1000][1000];
bool check(point t){
 if(t.x >=0 && t.x <n && t.y >=0 && t.y <m  && str[t.x][t.y] != 'X')    return 1;
 return 0;
}
int main(){
 int t;
 scanf("%d", &t);
 while(t--){
  scanf("%d %d", &n, &m);
  for(int i=0; i<n; i++)    scanf("%s", str[i]);
  queue<point> q;
  point start, final;
  for(int i=0; i<n; i++){
    for(int j=0; j<m; j++){
        dist[i][j] = 0;
        if(str[i][j] == 'S') {
         start.x = i;
         start.y = j;
         dist[i][j] = 1;
        }else if(str[i][j] == 'F'){
            final.x = i;
            final.y = j;
        }
     }
  }
  q.push(start);
  while(!q.empty()){
    point temp = q.front();
    q.pop();
	   for(int i=0; i<8; i++)   {
	    point copy = temp;
	    copy.x += X[i];
	    copy.y += Y[i];
	    while(check(copy)){
	     if(dist[copy.x][copy.y] == 0)  dist[copy.x][copy.y] = dist[temp.x][temp.y] + 1 , q.push(copy);
	     else if(dist[copy.x][copy.y] != dist[temp.x][temp.y]+1)   break;
	     copy.x += X[i];
	     copy.y += Y[i];
	   }
     }
   }
  cout << dist[final.x][final.y]-1 << endl;
 }
 return 0;
}
