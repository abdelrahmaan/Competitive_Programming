#include <bits/stdc++.h>
#define ll long long
#define eps 1e-15
#define PI 3.14159265
using namespace std;
//const int N = 1e6+6 , MAX = 10  , OO = 1000000009;
ll gcd(ll a, ll b) { return !b ? a : gcd(b , a % b); }
ll lcm(ll x, ll y) { return (x * y / gcd(x, y)); }
//ll fact(ll z)      { return (z <= 1) ? 1 : z * fact(z - 1); }
//int dx[] = {0 , 0  , 1 , -1 , 1 , -1 ,  1 , -1};
//int dy[] = {1 , -1 , 0 , 0 ,  1 , -1 , -1 ,  1};
int dx[] = { 0, 0, 1, -1, 1, -1, 1, -1 };
int dy[] = { 1, -1, 0, 0, -1, 1, 1, -1 };
bool valid(int i , int j) { return i >= 0 && j >= 0 && i < 8 && j < 8; }
//len any int num > 0 ... len = ceil(log10(a+1));
// C(n, r) = n! / ( (n-r)!  * r!)
// C++ code to get the smallest multiple of N with
// binary digits only.
#include <bits/stdc++.h>
using namespace std;
int t , N;
int mod(string t, int N){
    int r = 0;
    for (int i = 0; i < t.length(); i++){
        r = r * 10 + (t[i] - '0');
        r %= N;
    }
    return r;
}
string getMinimumMultipleOfBinaryDigit(int N){
    queue<string> q;
    set<int> visit;
    string t = "1";
    q.push(t);
    while (!q.empty())    {
        t = q.front() ,   q.pop();
        int rem = mod(t, N);
        if (rem == 0)   return t;
        else if(visit.find(rem) == visit.end()){
            visit.insert(rem);
            q.push(t + "0");
            q.push(t + "1");
        }
    }
}
int main(){
    scanf("%d" ,&t);
    while(t--){
        scanf("%d" , &N);
        cout << getMinimumMultipleOfBinaryDigit(N) << endl;
	}
	return 0;
}
