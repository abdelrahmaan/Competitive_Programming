#include <bits/stdc++.h>
#define ll long long
#define eps 1e-15
#define PI 3.14159265
using namespace std;
const int N = 1e6+6 , MAX = 10  , OO = 1000000009;
ll gcd(ll a, ll b) { return !b ? a : gcd(b , a % b); }
ll lcm(ll x, ll y) { return (x * y / gcd(x, y)); }
//ll fact(ll z)      { return (z <= 1) ? 1 : z * fact(z - 1); }
int dx[] = {0 , 0  , 1 , -1 , 1 , -1 ,  1 , -1};
int dy[] = {1 , -1 , 0 , 0 ,  1 , -1 , -1 ,  1};
//bool valid(int i , int j) { return i >= 0 && j >= 0 && i < 8 && j < 8; }
//len any int num > 0 ... len = ceil(log10(a+1));
bool win (string str) {
	bool is_full = true;
	for (int i=0;i<str.size();i++)  if (str[i] == '.') {    is_full = false;    break;  }

	if (is_full) {return true;}

	if (str[0] != '.' && str[0] == str[4] && str[4] == str[8])       {   return true;    }
    else if (str[2] != '.' && str[2] == str[4] && str[4] == str[6])  {   return true;    }
	else {
		for (int i=0;i<3;i++)
			if (str[i*3 + 0] != '.' && str[i*3 + 0] == str[i*3 + 1] && str[i*3 + 1] == str[i*3 + 2])    return true;

		for (int i=0;i<3;i++)
			if (str[0*3 + i] != '.' && str[0*3 + i] == str[1*3 + i] && str[1*3 + i] == str[2*3 + i])    return true;
	}
	return false;
}
void pre_calc (set<string> &valid) {
	string state = ".........";
	queue <string> state_q;
	queue <int> turn_q;
	char turn[] = "XO";
	state_q.push(state);
	turn_q.push(0);
	valid.insert(state);

	while (!state_q.empty()) {
		string c_state = state_q.front();
		int c_turn = turn_q.front();

		state_q.pop();
		turn_q.pop();

		if (win(c_state)) {continue;}

		for (int i=0;i<9;i++) {
			if (c_state[i] == '.') {
				string n_state = c_state;
				n_state[i] = turn[c_turn];
				if (valid.find(n_state) == valid.end()) {
					valid.insert(n_state);
					state_q.push(n_state);
					turn_q.push(1-c_turn);
				}
			}
		}
	}
	return;
}
int main () {
	set <string> valid;
	pre_calc (valid);

	char str[10];
	string state;
	while (1) {
		scanf ("%s",str);
		state = str;
		if (state == "end")                                     break;
		if (valid.find(state) != valid.end() && win(state))     puts("valid");
		else                                                    puts("invalid");
    }
	return 0;
}
**************************************
#include<stdlib.h>
#include<stdio.h>
#include<algorithm>
using namespace std;


char bo[10];

inline bool checkWin(char ch){
    if(bo[0] == ch && bo[4] == ch && bo[8] == ch) // same diagonal
        return 1;
    if(bo[2] == ch && bo[4] == ch && bo[6] == ch) // same diagonal
        return 1;
    for(int i=0;i<3;i++) // check each row and column
        if( (bo[i*3] == bo[i*3+1] && bo[i*3+1] == bo[i*3+2] && bo[i*3] == ch) ||
            (bo[i] == bo[i+3] && bo[i+3] == bo[i+6] && bo[i] == ch ) )
            return 1;
    return 0;
}

int main(){
    while(scanf("%s",bo)){
        if(bo[0] == 'e')
            break;
        bool x = checkWin('X');
        bool o = checkWin('O');
        int xn = count(bo,bo+9,'X'); // count X's
        int on = count(bo,bo+9,'O'); // count O's
        if(x && o) // if both won then it's invalid ( because when first one won it must been stopped )
            puts("invalid");
        else if(o){
            if( xn == on ) // if O wins then number of O's must be equal to number of X's because X's goes first
                puts("valid");
            else
                puts("invalid");
        }
        else if(x){
            if(xn == on+1) // if X wins then X's == O's+1 because X's goes first
                puts("valid");
            else
                puts("invalid");
        }
        else if(xn+on != 9 || xn-on != 1) // if no one win then board must be full (e.g have 9 ) and X's is bigger than O's by 1
            puts("invalid");
        else
            puts("valid");
    }
}